// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// list of field status type
enum FieldStatusEnum {
  ACTIVE
  INACTIVE
}

enum RoomTypeEnum {
  CLIENT
  TECHNICIAN
}

model Users {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  username String  @unique
  email    String  @unique @db.VarChar(255)
  /// user's phone
  phone    String? @unique @db.VarChar(255)
  /// user's password
  password String? @db.VarChar(255)

  metaData    Json?           @default("{}")
  status      FieldStatusEnum @default(ACTIVE)
  createdById String?         @db.Uuid
  updatedById String?         @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?       @updatedAt

  rooms    Rooms[]
  messages Messages[]
}

model Branches {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  location    Json?  @default("{}")

  metaData    Json?           @default("{}")
  status      FieldStatusEnum @default(ACTIVE)
  createdById String?         @db.Uuid
  updatedById String?         @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?       @updatedAt

  rooms Rooms[]
}

model Rooms {
  id   String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String       @unique
  type RoomTypeEnum @default(CLIENT)

  metaData    Json?           @default("{}")
  status      FieldStatusEnum @default(ACTIVE)
  createdById String?         @db.Uuid
  updatedById String?         @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime?       @updatedAt

  // clientId String @db.Uuid
  // client   Users  @relation(fields: [clientId], references: [id]) /// client

  branchId String?   @db.Uuid
  branches Branches? @relation(fields: [branchId], references: [id]) /// branches

  users    Users[]
  messages Messages[]
}

model Messages {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  text      String
  createdAt DateTime @default(now())

  userId String @db.Uuid
  user   Users  @relation(fields: [userId], references: [id])

  roomId String @db.Uuid
  Rooms  Rooms  @relation(fields: [roomId], references: [id])
}
